//Name : ATHAR NOOR MOHAMMAD RAFEE	ID : 20101396
//Section : 02		CSE220 Lab1(Spring2021)


//Linear Arrays
//Task1

import java.io.*;
import java.util.StringTokenizer;

public class Task1 {
    static final BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    static final PrintWriter pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));

    static int[] readArray() throws IOException {
        // to read array
        pw.print("Please enter the elements of the separate by a space : ");
        pw.flush();
        StringTokenizer tk = new StringTokenizer(br.readLine());
        //pw.println();
        int size = tk.countTokens(); // number of elements
        int[] array = new int[size];
        for (int i = 0; i < size; i++) {
            array[i] = Integer.parseInt(tk.nextToken());
        }
        return array;
    }

    static void shiftLeft(int[] array, int cell) {
        int[] New_array = new int[array.length];
        int count = 0;
        for (int i = cell; i < array.length; i++) {
            New_array[count] = array[i];
            count++;
        }
        print_Array(New_array);
    }

    static void print_Array(int[] array) {
        // printing the array. Is that something new?
        pw.print("[ ");
        for (int i = 0; i < array.length - 1; i++) {
            pw.print(array[i] + ", ");
        }
        pw.println(array[array.length - 1] + " ]");
    }

    public static void main(String[] args) throws IOException {
        int[] source = readArray();
        pw.print("Please enter the cell number : ");
        pw.flush();
        int k = Integer.parseInt(br.readLine()); //cell
        br.close();
        shiftLeft(source, k);
        pw.close();
    }
}

//Task2

import java.io.*;
import java.util.StringTokenizer;

public class Task2 {
    static final BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    static final PrintWriter pw = new PrintWriter(new OutputStreamWriter(System.out));

    static int[] readArray() throws IOException {
        // to read array obviously
        pw.print("Please enter the elements of the array separated by a space : ");
        pw.flush();
        StringTokenizer tk = new StringTokenizer(br.readLine());
        int size = tk.countTokens();
        int[] array = new int[size];
        for (int i = 0; i < size; i++) {
            array[i] = Integer.parseInt(tk.nextToken());
        }
        return array;
    }

    static void rotateLeft(int[] array, int cell) {
        int[] New_array = new int[array.length];
        int count = 0;
        for (int i = cell; i < array.length; i++) {
            New_array[count] = array[i];
            count++;
        }
        for (int i = 0; i < cell; i++) {
            New_array[count] = array[i];
            count++;
        }
        print_Array(New_array);
    }

    static void print_Array(int[] array) {
        // printing the array.
        pw.print("[ ");
        for (int i = 0; i < array.length - 1; i++) {
            pw.print(array[i] + ", ");
        }
        pw.println(array[array.length - 1] + " ]");
    }

    public static void main(String[] args) throws IOException {
        int[] source = readArray();
        pw.print("Please enter the cell number : ");
        pw.flush();
        int k = Integer.parseInt(br.readLine());//cell
        br.close();
        rotateLeft(source, k);
        pw.close();
    }
}

//Task3

import java.io.*;
import java.util.StringTokenizer;

public class Task3 {
    static final BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    static final PrintWriter pw = new PrintWriter(new OutputStreamWriter(System.out));

    static int[] readArray() throws IOException {
        // to read array obviously
        pw.print("Please enter all the elements of the array separated by a space : ");
        pw.flush();
        StringTokenizer tk = new StringTokenizer(br.readLine());
        int size = tk.countTokens();
        int[] array = new int[size];
        for (int i = 0; i < size; i++) {
            array[i] = Integer.parseInt(tk.nextToken());
        }
        return array;
    }

    static void remove(int[] array, int size, int index) {
        int[] New_array = new int[array.length];
        int count = 0;
        for (int i = 0; i < size; i++) {
            if (i == index) continue;
            New_array[count] = array[i];
            count++;
        }
        print_Array(New_array);
    }

    static void print_Array(int[] array) {
        // printing the array.
        pw.print("[ ");
        for (int i = 0; i < array.length - 1; i++) {
            pw.print(array[i] + ", ");
        }
        pw.println(array[array.length - 1] + " ]");
    }

    public static void main(String[] args) throws IOException {
        int[] source = readArray();
        pw.print("Please enter the size of the array : ");
        pw.flush();
        int size = Integer.parseInt(br.readLine());
        pw.print("Please enter the index of the array to be removed from the array : ");
        pw.flush();
        int index = Integer.parseInt(br.readLine());
        br.close();
        remove(source, size, index);
        pw.close();
    }
}

//Task4

import java.io.*;
import java.util.StringTokenizer;

public class Task4 {
    static final BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    static final PrintWriter pw = new PrintWriter(new OutputStreamWriter(System.out));

    static int[] readArray() throws IOException {
        // to read array obviously
        pw.print("Please enter all the elements of the array separated by a space : ");
        pw.flush();
        StringTokenizer tk = new StringTokenizer(br.readLine());
        int size = tk.countTokens();
        int[] array = new int[size];
        for (int i = 0; i < size; i++) {
            array[i] = Integer.parseInt(tk.nextToken());
        }
        return array;
    }

    static void removeAll(int[] array, int size, int element) {
        int[] New_array = new int[array.length];
        int count = 0;
        for (int i = 0; i < size; i++) {
            if (array[i] == element) continue;
            New_array[count] = array[i];
            count++;
        }
        print_Array(New_array);
    }

    static void print_Array(int[] array) {
        // printing the array.
        pw.print("[ ");
        for (int i = 0; i < array.length - 1; i++) {
            pw.print(array[i] + ", ");
        }
        pw.println(array[array.length - 1] + " ]");
    }

    public static void main(String[] args) throws IOException {
        int[] source = readArray();
        pw.print("Please enter the size of the array : ");
        pw.flush();
        int size = Integer.parseInt(br.readLine());
        pw.print("Please enter the element of the array to be removed from the array : ");
        pw.flush();
        int index = Integer.parseInt(br.readLine());
        br.close();
        removeAll(source, size, index);
        pw.close();
    }
}

//Task5

import java.io.*;
import java.util.StringTokenizer;

public class Task5 {
    static final BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    static final PrintWriter pw = new PrintWriter(new OutputStreamWriter(System.out));

    static int[] readArray() throws IOException {
        // to read array obviously
        pw.print("Please enter all the elements of the array separated by a space : ");
        pw.flush();
        StringTokenizer tk = new StringTokenizer(br.readLine());
        int size = tk.countTokens();
        int[] array = new int[size];
        for (int i = 0; i < size; i++) {
            array[i] = Integer.parseInt(tk.nextToken());
        }
        return array;
    }

    static boolean isPossible(int[] array) {
        long[] prefix_sum = make_prefix_sum(array);
        long left_part;
        for (int i = 0; i < prefix_sum.length; i++) {
            // add current sum of the elements to left part.
            left_part = prefix_sum[i];

            // find sum of rest array
            // elements (right_part)
            long right_part = prefix_sum[prefix_sum.length - 1] - prefix_sum[i];
            // if possible
            if (left_part == right_part && i + 1 < prefix_sum.length) {
                return true;
            }
        }
        return false;
    }

    static long[] make_prefix_sum(int[] arr) {
        long[] prefix_sum = new long[arr.length];
        long current = 0;
        for (int i = 0; i < arr.length; i++) {
            current += arr[i];
            prefix_sum[i] = current;
        }
        return prefix_sum;
    }

    public static void main(String[] args) throws IOException {
        int[] array = readArray();
        br.close();
        pw.println(isPossible(array));
        pw.close();
    }
}

//Task6

import java.io.*;

public class Task6 {
    static final BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    static final PrintWriter pw = new PrintWriter(new OutputStreamWriter(System.out));

    static int[] make_new_array(int n) {    //According the pattern
        int[] array = new int[n * n];
        int num = 1;
        int mod = n, count = 0;
        for (int i = (n * n) - 1; i > -1; i--) {
            array[i] = num;
            num++;
            if (mod != 0 && i % mod == 0) {
                num = 1;
                i -= count;
                mod--;
                count++;
            }
            if (mod == 0) num = 0;
        }
        return array;
    }

    static void print_Array(int[] array) {
        // printing the array.
        pw.print("[ ");
        for (int i = 0; i < array.length - 1; i++) {
            pw.print(array[i] + ", ");
        }
        pw.println(array[array.length - 1] + " ]");
    }

    public static void main(String[] args) throws IOException {
        pw.print("Please enter the number : ");
        pw.flush();
        int[] array = make_new_array(Integer.parseInt(br.readLine()));
        br.close();
        print_Array(array);
        pw.close();
    }
}

//Task7

import java.io.*;
import java.util.StringTokenizer;

public class Task7 {
    static final BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    static final PrintWriter pw = new PrintWriter(new OutputStreamWriter(System.out));

    static int[] readArray() throws IOException {
        // to read array obviously
        pw.print("Please enter all the elements of the array separated by a space : ");
        pw.flush();
        StringTokenizer tk = new StringTokenizer(br.readLine());
        int size = tk.countTokens();
        int[] array = new int[size];
        for (int i = 0; i < size; i++) {
            array[i] = Integer.parseInt(tk.nextToken());
        }
        return array;
    }

    static int give_me_Max_Bunch_Count(int[] array) {
        int max = Integer.MIN_VALUE;
        int check = array[0], count = 0;
        for (int i = 0; i < array.length; i++) {
            if (array[i] == check) {
                count++;
            } else {
                if (count > max) max = count;
                check = array[i];
                count = 1;
            }
        }
        if (count > max) max = count; //guss I can't use this :( max = Math.max(count, max);
        return (max > 1 ? max : 0);
    }

    public static void main(String[] args) throws IOException {
        int result = give_me_Max_Bunch_Count(readArray());
        br.close();
        pw.println(result);
        pw.close();
    }
}

//Task8

import java.io.*;
import java.util.StringTokenizer;

public class Task8 {
    static final BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    static final PrintWriter pw = new PrintWriter(new OutputStreamWriter(System.out));
    static final int range = (int) 1e6 + 1;
    static int[] repetition_count = new int[range];

    static int[] readArray() throws IOException {
        // to read array obviously
        pw.print("Please enter all the elements of the array separated by a space : ");
        pw.flush();
        StringTokenizer tk = new StringTokenizer(br.readLine());
        int size = tk.countTokens();
        int[] array = new int[size];
        for (int i = 0; i < size; i++) {
            array[i] = Integer.parseInt(tk.nextToken());
        }
        return array;
    }

    static boolean same_number_of_repetition(int[] arr) {
        int max_element = Integer.MIN_VALUE;
        for (int i = 0; i < arr.length; i++) {
            repetition_count[arr[i]]++;
            if (arr[i] > max_element) max_element = arr[i];
        }
        boolean contains = false;
        for (int i = 0; i <= max_element; i++) {//Kind of a stupid solution pretty inefficient.
            for (int j = 0; j <= max_element; j++) {
                if (repetition_count[i] == repetition_count[j] && repetition_count[i] > 1 && repetition_count[j] > 1 && i != j) {
                    contains = true;
                    break;
                }
            }
            if (contains) break;
        }
        return contains;
    }

    public static void main(String[] args) throws IOException {
        boolean check = same_number_of_repetition(readArray());
        br.close();
        pw.println(check);
        pw.close();
    }
}

//Circular Array
//Task1

import java.io.*;
import java.util.StringTokenizer;

public class Task1 {
    static final BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    static final PrintWriter pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));

    static String[] readArray() throws IOException {
        // to read array obviously
        pw.print("Please enter all the elements of the array separated by a space : ");
        pw.flush();
        StringTokenizer tk = new StringTokenizer(br.readLine());
        int size = tk.countTokens();
        String[] array = new String[size];
        for (int i = 0; i < size; i++) {
            array[i] = tk.nextToken();
        }
        return array;
    }

    static boolean isPalindrome(String[] array, int start, int size) {
        String[] normal_array = new String[size];
        String[] reversed_array = new String[size];
        int c = 0, i = start;
        while (c < size) {
            i %= array.length;
            normal_array[c] = array[i];
            c++;
            i++;
        }
        c = 0;
        i = size - 1 + start;
        i %= array.length;
        while (c < size) {
            if (i < 0) i = array.length - 1;
            reversed_array[c] = (array[i]);
            c++;
            i--;
        }
        for (int j = 0; j < size; j++) {
            if (!normal_array[i].equals(reversed_array[i])) return false;
        }
        return true;
    }

    public static void main(String[] args) throws IOException {
        String[] array = readArray();
        pw.print("Please enter the start index of the circular array : ");
        pw.flush();
        int start = Integer.parseInt(br.readLine());
        pw.print("Please enter the size of the circular array : ");
        pw.flush();
        int size = Integer.parseInt(br.readLine());
        br.close();
        pw.println(isPalindrome(array, start, size));
        pw.close();
    }
}

//Task2

import java.io.*;
import java.util.StringTokenizer;

public class Task2 {
    //This solution will only work for integers less than (1e6 + 4)
    static final BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    static final PrintWriter pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
    static final int range = (int) 1e6 + 5;
    static boolean[] check = new boolean[range];

    static int[] readArray() throws IOException {
        // to read array obviously
        pw.print("Please enter all the elements of the array separated by a space : ");
        pw.flush();
        StringTokenizer tk = new StringTokenizer(br.readLine());
        int size = tk.countTokens();//size of the array
        int[] array = new int[size];
        for (int i = 0; i < size; i++) {
            array[i] = Integer.parseInt(tk.nextToken());
        }
        return array;
    }

    static int[] common_elements(int[] arr1, int start1, int size1, int[] arr2, int start2, int size2) {
        for (int k : arr1) { //I just need two arrays
            if (k != 0) check[k] = true; // I don't need to care about zeros;
        }
        int length = 0; //to count the new length of new the array
        for (int k : arr2) {
            if (check[k]) {
                length++;
            }
        }

        int[] commonElements = new int[length];
        int c = 0;
        for (int k : arr2) {
            if (check[k]) {
                commonElements[c] = k;
                c++;
            }
        }
        return commonElements;
    }

    static void printArray(int[] array) {
        if (array.length == 0) {
            pw.println("[empty]");
            return;
        }
        pw.print("[");
        for (int i = 0; i < array.length - 1; i++) {
            pw.print(array[i] + ",");
        }
        pw.println(array[array.length - 1] + "]");
    }

    public static void main(String[] args) throws IOException {
        int[] circular_array1 = readArray();
        pw.print("Please enter the start index and the size of the first circular array separated by a space : ");
        pw.flush();
        StringTokenizer tk = new StringTokenizer(br.readLine());
        int start1 = Integer.parseInt(tk.nextToken()), size1 = Integer.parseInt(tk.nextToken());
        int[] circular_array2 = readArray();
        pw.print("Please enter the start index and the size of the second circular array separated by a space : ");
        pw.flush();
        tk = new StringTokenizer(br.readLine());
        int start2 = Integer.parseInt(tk.nextToken()), size2 = Integer.parseInt(tk.nextToken());
        br.close();
        int[] linear_array_with_common_elements =
                common_elements(circular_array1, start1, size1, circular_array2, start2, size2);
        printArray(linear_array_with_common_elements);
        pw.close();
    }
}

